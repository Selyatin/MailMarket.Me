{"ast":null,"code":"import { Base64 } from \"js-base64\";\nimport mongodb from \"mongodb\";\nimport simplesmtp from \"node-smtp-client\";\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://main-user:09730Success@mailmarketme-k4esh.mongodb.net/test?retryWrites=true&w=majority\";\nconst client = new MongoClient(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst mailerClient = simplesmtp.Mail({\n  host: \"mbox.contact.bg\",\n  port: 25,\n  secure: false,\n  username: \"mailmarketme@mbox.contact.bg\",\n  password: \"09730Success\"\n});\n\nfunction findEmailAddresses(StrObj) {\n  var separateEmailsBy = \", \";\n  var email = \"<none>\"; // if no match, use this\n\n  var emailsArray = StrObj.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z0-9._-]+)/gi);\n\n  if (emailsArray) {\n    email = \"\";\n\n    for (var i = 0; i < emailsArray.length; i++) {\n      if (i != 0) email += separateEmailsBy;\n      email += emailsArray[i];\n    }\n  }\n\n  return email;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nlet mailArray = [];\nclient.connect(err => {\n  const db = client.db(\"MailMarketMe\");\n  let mailsToSend = db.collection(\"emails\").find({});\n  mailsToSend.toArray().then(result => {\n    for (let i = 0; i <= req.body.pointsToUse; i++) {\n      mailArray.push(result[i].email);\n    }\n  });\n  client.close();\n});\nexport default ((req, res) => {\n  if (req.method === \"POST\" && req.body.id != undefined && req.body.id != null && req.body.pointsToUse != undefined && req.body.pointsToUse != null && req.body.customEmailList != undefined && req.body.customEmailList != null && req.body.msgToSend != undefined && req.body.msgToSend != null && req.body.from != undefined && req.body.from != null) {\n    client.connect(err => {\n      if (err) throw err;\n      const db = client.db(\"MailMarketMe\");\n      db.collection(\"accounts\").findOne({\n        _id: mongodb.ObjectId(Base64.decode(req.body.id))\n      }, (err, result) => {\n        if (req.body.pointsToUse <= result.points) {\n          db.collection(\"accounts\").updateOne({\n            _id: mongodb.ObjectId(Base64.decode(req.body.id))\n          }, {\n            $set: {\n              points: result.points - req.body.pointsToUse,\n              totalEmailsSent: parseInt(req.body.pointsToUse) + parseInt(result.totalEmailsSent)\n            }\n          }, err => {\n            if (err) throw err;\n          });\n\n          for (let i = 0; i < req.body.pointsToUse; i++) {\n            let data = mailArray[i];\n            console.log(data);\n          }\n\n          ; // Send the emails \n\n          res.status(200).end();\n        } else {\n          res.status(406).end();\n        }\n      });\n    });\n  } else {\n    res.status(406).end();\n  }\n});","map":{"version":3,"sources":["/Users/mac/Desktop/Web Apps/MailMarket.me/mailmarket.me/pages/api/mailer.js"],"names":["Base64","mongodb","simplesmtp","MongoClient","uri","client","useNewUrlParser","useUnifiedTopology","mailerClient","Mail","host","port","secure","username","password","findEmailAddresses","StrObj","separateEmailsBy","email","emailsArray","match","i","length","shuffle","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","mailArray","connect","err","db","mailsToSend","collection","find","toArray","then","result","req","body","pointsToUse","push","close","res","method","id","undefined","customEmailList","msgToSend","from","findOne","_id","ObjectId","decode","points","updateOne","$set","totalEmailsSent","parseInt","data","console","log","status","end"],"mappings":"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","sourcesContent":["import { Base64 } from \"js-base64\";\nimport mongodb from \"mongodb\";\nimport simplesmtp from \"node-smtp-client\";\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://main-user:09730Success@mailmarketme-k4esh.mongodb.net/test?retryWrites=true&w=majority\";\n\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst mailerClient = simplesmtp.Mail({\n    host: \"mbox.contact.bg\",\n    port: 25,\n    secure: false,\n    username: \"mailmarketme@mbox.contact.bg\",\n    password: \"09730Success\",\n})\n\nfunction findEmailAddresses(StrObj) {\n    var separateEmailsBy = \", \";\n    var email = \"<none>\"; // if no match, use this\n    var emailsArray = StrObj.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z0-9._-]+)/gi);\n    if (emailsArray) {\n        email = \"\";\n        for (var i = 0; i < emailsArray.length; i++) {\n            if (i != 0) email += separateEmailsBy;\n            email += emailsArray[i];\n        }\n    }\n    return email;\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nlet mailArray = [];\nclient.connect(err => {\n    const db = client.db(\"MailMarketMe\");\n    let mailsToSend = db.collection(\"emails\").find({});\n    mailsToSend.toArray().then(result => {\n        for (let i = 0; i <= req.body.pointsToUse; i++) {\n            mailArray.push(result[i].email);\n        }\n    });\n    client.close();\n});\n\nexport default (req, res) => {\n    if (req.method === \"POST\" && req.body.id != undefined && req.body.id != null && req.body.pointsToUse != undefined && req.body.pointsToUse != null && req.body.customEmailList != undefined && req.body.customEmailList != null && req.body.msgToSend != undefined && req.body.msgToSend != null && req.body.from != undefined && req.body.from != null) {\n        client.connect(err => {\n            if (err) throw err;\n            const db = client.db(\"MailMarketMe\");\n            db.collection(\"accounts\").findOne({ _id: mongodb.ObjectId(Base64.decode(req.body.id)) }, (err, result) => {\n                if (req.body.pointsToUse <= result.points) {\n                    db.collection(\"accounts\").updateOne({ _id: mongodb.ObjectId(Base64.decode(req.body.id)) },\n                        {\n                            $set: {\n                                points: result.points - req.body.pointsToUse,\n                                totalEmailsSent: parseInt(req.body.pointsToUse) + parseInt(result.totalEmailsSent)\n                            }\n                        },\n                        err => { if (err) throw err }\n                    );\n\n\n                    for(let i = 0; i < req.body.pointsToUse; i++){\n                            let data = mailArray[i]\n                            console.log(data);\n                    };\n\n                    // Send the emails \n                    res.status(200).end();\n                } else {\n                    res.status(406).end();\n                }\n            });\n        });\n    }\n    else {\n        res.status(406).end();\n    }\n}"]},"metadata":{},"sourceType":"module"}