{"ast":null,"code":"import { Base64 } from \"js-base64\";\nimport mongodb from \"mongodb\";\nimport nodemailer from \"nodemailer\";\nimport path from \"path\";\nimport fs from \"fs\";\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://main-user:09730Success@mailmarketme-k4esh.mongodb.net/test?retryWrites=true&w=majority\";\nconst client = new MongoClient(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst transporter = nodemailer.createTransport({\n  host: \"mbox.contact.bg\",\n  secure: false,\n  auth: {\n    user: \"mailmarketme@mbox.contact.bg\",\n    pass: \"09730Success\"\n  }\n});\nexport default ((req, res) => {\n  if (req.method === \"POST\" && req.body.id != undefined && req.body.id != null && req.body.pointsToUse != undefined && req.body.pointsToUse != null && req.body.customEmailList != undefined && req.body.customEmailList != null && req.body.msgToSend != undefined && req.body.msgToSend != null) {\n    client.connect(err => {\n      if (err) throw err;\n      const db = client.db(\"MailMarketMe\");\n      db.collection(\"accounts\").findOne({\n        _id: mongodb.ObjectId(Base64.decode(req.body.id))\n      }, (err, result) => {\n        if (req.body.pointsToUse <= result.points) {\n          db.collection(\"accounts\").updateOne({\n            _id: mongodb.ObjectId(Base64.decode(req.body.id))\n          }, {\n            $set: {\n              points: result.points - req.body.pointsToUse,\n              totalEmailsSent: req.body.pointsToUse + result.totalEmailsSent\n            }\n          }, err => {\n            if (err) throw err;\n          });\n          let mailsToSet = db.collection(\"emails\").find({}).limit(parseInt(req.body.pointsToUse));\n          let mailList = req.body.customEmailList.replace(\" \", \", \");\n          transporter.sendMail({\n            from: \"selololo@gmail.com\",\n            to: \"selyatinismet@gmail.com\",\n            subject: \"Halolo\",\n            text: \"\",\n            html: \"<h1>Hello</h1>\"\n          }, (err, info) => {\n            if (err) throw err;\n            console.log(info);\n          }); // mailsToSet.forEach(data => {\n          //     transporter.message({\n          //         from: \"selyatinismet@lololo.com\",\n          //         to: data.email,\n          //         subject: \"Hello Test\",\n          //     }).body(\n          //     `\n          //         <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n          //         <html xmlns=\"https://www.w3.org/1999/xhtml\">\n          //         <head>\n          //         <title>Test Email Sample</title>\n          //         <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n          //         <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n          //         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0 \" />\n          //         <style>\n          //         <!--- CSS code (if any) --->\n          //         </style>\n          //         </head>\n          //         <body>\n          //             <h1>Hello</h1>\n          //         </body>\n          //     `).send(err => {\n          //         if (err) throw err;\n          //     });\n          // });;\n          // Send the emails \n\n          res.status(200).end();\n        } else {\n          res.status(406).end();\n        }\n      });\n    });\n  } else {\n    res.status(406).end();\n  }\n});","map":{"version":3,"sources":["/Users/mac/Desktop/Web Apps/MailMarket.me/mailmarket.me/pages/api/mailer.js"],"names":["Base64","mongodb","nodemailer","path","fs","MongoClient","uri","client","useNewUrlParser","useUnifiedTopology","transporter","createTransport","host","secure","auth","user","pass","req","res","method","body","id","undefined","pointsToUse","customEmailList","msgToSend","connect","err","db","collection","findOne","_id","ObjectId","decode","result","points","updateOne","$set","totalEmailsSent","mailsToSet","find","limit","parseInt","mailList","replace","sendMail","from","to","subject","text","html","info","console","log","status","end"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACI,WAA5B;AACA,MAAMC,GAAG,GAAG,sGAAZ;AAEA,MAAMC,MAAM,GAAG,IAAIF,WAAJ,CAAgBC,GAAhB,EAAqB;AAACE,EAAAA,eAAe,EAAE,IAAlB;AAAwBC,EAAAA,kBAAkB,EAAE;AAA5C,CAArB,CAAf;AACA,MAAMC,WAAW,GAAGR,UAAU,CAACS,eAAX,CAA2B;AAC3CC,EAAAA,IAAI,EAAE,iBADqC;AAE3CC,EAAAA,MAAM,EAAE,KAFmC;AAG3CC,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAE,8BADJ;AAEFC,IAAAA,IAAI,EAAE;AAFJ;AAHqC,CAA3B,CAApB;AASA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,MAAGD,GAAG,CAACE,MAAJ,KAAe,MAAf,IAAyBF,GAAG,CAACG,IAAJ,CAASC,EAAT,IAAeC,SAAxC,IAAqDL,GAAG,CAACG,IAAJ,CAASC,EAAT,IAAe,IAApE,IAA4EJ,GAAG,CAACG,IAAJ,CAASG,WAAT,IAAwBD,SAApG,IAAiHL,GAAG,CAACG,IAAJ,CAASG,WAAT,IAAwB,IAAzI,IAAiJN,GAAG,CAACG,IAAJ,CAASI,eAAT,IAA4BF,SAA7K,IAA0LL,GAAG,CAACG,IAAJ,CAASI,eAAT,IAA4B,IAAtN,IAA8NP,GAAG,CAACG,IAAJ,CAASK,SAAT,IAAsBH,SAApP,IAAiQL,GAAG,CAACG,IAAJ,CAASK,SAAT,IAAsB,IAA1R,EAA+R;AAC7RlB,IAAAA,MAAM,CAACmB,OAAP,CAAeC,GAAG,IAAI;AACpB,UAAGA,GAAH,EAAQ,MAAMA,GAAN;AACR,YAAMC,EAAE,GAAGrB,MAAM,CAACqB,EAAP,CAAU,cAAV,CAAX;AACEA,MAAAA,EAAE,CAACC,UAAH,CAAc,UAAd,EAA0BC,OAA1B,CAAkC;AAACC,QAAAA,GAAG,EAAE9B,OAAO,CAAC+B,QAAR,CAAiBhC,MAAM,CAACiC,MAAP,CAAchB,GAAG,CAACG,IAAJ,CAASC,EAAvB,CAAjB;AAAN,OAAlC,EAAuF,CAACM,GAAD,EAAMO,MAAN,KAAiB;AACpG,YAAGjB,GAAG,CAACG,IAAJ,CAASG,WAAT,IAAwBW,MAAM,CAACC,MAAlC,EAAyC;AACrCP,UAAAA,EAAE,CAACC,UAAH,CAAc,UAAd,EAA0BO,SAA1B,CAAoC;AAACL,YAAAA,GAAG,EAAE9B,OAAO,CAAC+B,QAAR,CAAiBhC,MAAM,CAACiC,MAAP,CAAchB,GAAG,CAACG,IAAJ,CAASC,EAAvB,CAAjB;AAAN,WAApC,EACI;AACIgB,YAAAA,IAAI,EAAE;AACFF,cAAAA,MAAM,EAAED,MAAM,CAACC,MAAP,GAAgBlB,GAAG,CAACG,IAAJ,CAASG,WAD/B;AAEFe,cAAAA,eAAe,EAAErB,GAAG,CAACG,IAAJ,CAASG,WAAT,GAAuBW,MAAM,CAACI;AAF7C;AADV,WADJ,EAOIX,GAAG,IAAI;AAAC,gBAAGA,GAAH,EAAQ,MAAMA,GAAN;AAAU,WAP9B;AAUA,cAAIY,UAAU,GAAGX,EAAE,CAACC,UAAH,CAAc,QAAd,EAAwBW,IAAxB,CAA6B,EAA7B,EAAiCC,KAAjC,CAAuCC,QAAQ,CAACzB,GAAG,CAACG,IAAJ,CAASG,WAAV,CAA/C,CAAjB;AACA,cAAIoB,QAAQ,GAAG1B,GAAG,CAACG,IAAJ,CAASI,eAAT,CAAyBoB,OAAzB,CAAiC,GAAjC,EAAsC,IAAtC,CAAf;AACAlC,UAAAA,WAAW,CAACmC,QAAZ,CAAqB;AACjBC,YAAAA,IAAI,EAAE,oBADW;AAEjBC,YAAAA,EAAE,EAAE,yBAFa;AAGjBC,YAAAA,OAAO,EAAE,QAHQ;AAIjBC,YAAAA,IAAI,EAAE,EAJW;AAKjBC,YAAAA,IAAI,EAAE;AALW,WAArB,EAMG,CAACvB,GAAD,EAAMwB,IAAN,KAAe;AACd,gBAAGxB,GAAH,EAAQ,MAAMA,GAAN;AACRyB,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,WATD,EAbqC,CAuBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjC,UAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACH,SAlDD,MAkDM;AACFrC,UAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACH;AACJ,OAtDD;AAuDH,KA1DD;AA2DD,GA5DD,MA6DI;AACFrC,IAAAA,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD;AACF,CAjED","sourcesContent":["import {Base64} from \"js-base64\";\nimport mongodb from \"mongodb\";\nimport nodemailer from \"nodemailer\";\nimport path from \"path\";\nimport fs from \"fs\";\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://main-user:09730Success@mailmarketme-k4esh.mongodb.net/test?retryWrites=true&w=majority\";\n\nconst client = new MongoClient(uri, {useNewUrlParser: true, useUnifiedTopology: true});\nconst transporter = nodemailer.createTransport({\n    host: \"mbox.contact.bg\",\n    secure: false,\n    auth: {\n        user: \"mailmarketme@mbox.contact.bg\",\n        pass: \"09730Success\"\n    }\n})\n\nexport default (req, res) => {\n  if(req.method === \"POST\" && req.body.id != undefined && req.body.id != null && req.body.pointsToUse != undefined && req.body.pointsToUse != null && req.body.customEmailList != undefined && req.body.customEmailList != null && req.body.msgToSend != undefined && req.body.msgToSend != null){\n    client.connect(err => {\n      if(err) throw err;\n      const db = client.db(\"MailMarketMe\");\n        db.collection(\"accounts\").findOne({_id: mongodb.ObjectId(Base64.decode(req.body.id))}, (err, result) => {\n            if(req.body.pointsToUse <= result.points){\n                db.collection(\"accounts\").updateOne({_id: mongodb.ObjectId(Base64.decode(req.body.id))}, \n                    {\n                        $set: {\n                            points: result.points - req.body.pointsToUse,\n                            totalEmailsSent: req.body.pointsToUse + result.totalEmailsSent\n                        }\n                    },\n                    err => {if(err) throw err}\n                );\n\n                let mailsToSet = db.collection(\"emails\").find({}).limit(parseInt(req.body.pointsToUse));\n                let mailList = req.body.customEmailList.replace(\" \", \", \");\n                transporter.sendMail({\n                    from: \"selololo@gmail.com\",\n                    to: \"selyatinismet@gmail.com\",\n                    subject: \"Halolo\",\n                    text: \"\",\n                    html: \"<h1>Hello</h1>\"\n                }, (err, info) => {\n                    if(err) throw err;\n                    console.log(info);\n                })\n                // mailsToSet.forEach(data => {\n                //     transporter.message({\n                //         from: \"selyatinismet@lololo.com\",\n                //         to: data.email,\n                //         subject: \"Hello Test\",\n                //     }).body(\n                //     `\n                //         <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n                //         <html xmlns=\"https://www.w3.org/1999/xhtml\">\n                //         <head>\n                //         <title>Test Email Sample</title>\n                //         <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n                //         <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n                //         <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0 \" />\n                //         <style>\n                //         <!--- CSS code (if any) --->\n                //         </style>\n                //         </head>\n                //         <body>\n                //             <h1>Hello</h1>\n                //         </body>\n                //     `).send(err => {\n                //         if (err) throw err;\n                //     });\n                // });;\n                // Send the emails \n                res.status(200).end();\n            }else {\n                res.status(406).end();\n            }\n        });\n    });\n  }\n  else{\n    res.status(406).end();\n  }\n}"]},"metadata":{},"sourceType":"module"}