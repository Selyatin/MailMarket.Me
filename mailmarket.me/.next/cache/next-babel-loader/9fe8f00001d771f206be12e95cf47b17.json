{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Router from \"next/router\";\nimport Head from \"next/head\";\nimport checkAuth from \"../lib/checkAuth\";\nimport axios from \"axios\";\nexport default class DashBoardIndex extends React.Component {\n  constructor(props) {\n    super(props);\n    this.typingTimeout = null;\n    this.state = {\n      sent: 0,\n      points: 0,\n      pointsToUse: 0,\n      from: null,\n      subject: null,\n      msgToSend: null,\n      customEmailList: [],\n      totalEmailsSent: 0,\n      pageLoading: true,\n      decisor: false,\n      decisorLoading: false,\n      decisorResult: false,\n      products: false\n    };\n    this.setDecisorOn = this.setDecisorOn.bind(this);\n    this.setDecisorOff = this.setDecisorOff.bind(this);\n    this.setProductsOn = this.setProductsOn.bind(this);\n    this.setProductsOff = this.setProductsOff.bind(this);\n    this.setPointsToUse = this.setPointsToUse.bind(this);\n    this.setMsgToSend = this.setMsgToSend.bind(this);\n    this.setFrom = this.setFrom.bind(this);\n    this.setSubject = this.setSubject.bind(this);\n    this.setCustomEmailList = this.setCustomEmailList.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n  }\n\n  static async getInitialProps({\n    req,\n    res\n  }) {\n    return checkAuth(req, res);\n  }\n\n  componentDidMount() {\n    if (this.props.loggedIn && this.props.id != null) {\n      axios({\n        url: \"/api/user\",\n        method: \"POST\",\n        data: {\n          id: this.props.id\n        }\n      }).then(response => {\n        this.setState({\n          pageLoading: false,\n          sent: response.data.sent,\n          points: response.data.points,\n          totalEmailsSent: response.data.totalEmailsSent\n        });\n      }).catch(err => Router.push(\"/login\"));\n    }\n  }\n\n  sendRequest() {\n    if (this.state.msgToSend != null) {\n      this.setState({\n        decisorLoading: true\n      });\n      axios({\n        url: \"/api/mailer\",\n        method: \"POST\",\n        data: {\n          id: this.props.id,\n          pointsToUse: this.state.pointsToUse,\n          from: this.state.from,\n          subject: this.state.subject,\n          msgToSend: this.state.msgToSend,\n          customEmailList: this.state.customEmailList\n        }\n      }).then(result => {\n        if (result.status == 200) {\n          this.setState({\n            decisor: false,\n            decisorLoading: false,\n            decisorResult: true,\n            points: this.state.points - this.state.pointsToUse,\n            pointsToUse: 0,\n            sent: parseInt(this.state.sent) + parseInt(this.state.pointsToUse),\n            totalEmailsSent: this.state.pointsToUse + this.state.totalEmailsSent,\n            customEmailList: []\n          });\n        }\n      }).catch(err => {\n        this.setState({\n          decisorLoading: false,\n          decisorResult: false\n        });\n      });\n    } else {\n      alert(\"Your message is empty!\");\n    }\n  }\n\n  setPointsToUse(elem) {\n    clearTimeout(this.typingTimeout);\n    let value = elem.target.value;\n    this.typingTimeout = setTimeout(() => {\n      this.setState({\n        pointsToUse: this.state.customEmailList.length > 0 ? parseInt(value) + this.state.customEmailList.length : parseInt(value)\n      });\n    }, 500);\n  }\n\n  setFrom(elem) {\n    this.setState({\n      from: elem.target.value\n    });\n  }\n\n  setSubject(elem) {\n    this.setState({\n      subject: elem.target.value\n    });\n  }\n\n  setMsgToSend(elem) {\n    this.setState({\n      msgToSend: elem.target.value\n    });\n  }\n\n  setCustomEmailList(elem) {\n    clearTimeout(this.typingTimeout);\n    let value = elem.target.value;\n    this.typingTimeout = setTimeout(() => {\n      let mails = value.length > 1 ? value.replace(\" \", \"\").replace(\",\", \"\\n\").split(\"\\n\").filter(Boolean) : [];\n      let pointsToUse = this.state.pointsToUse;\n\n      if (mails.length > this.state.customEmailList.length) {\n        pointsToUse = mails.length - this.state.customEmailList.length + this.state.pointsToUse;\n      }\n\n      if (mails.length < this.state.customEmailList.length) {\n        pointsToUse = this.state.pointsToUse - (this.state.customEmailList.length - mails.length);\n      }\n\n      if (mails.length == 0) {\n        pointsToUse = this.state.pointsToUse - this.state.customEmailList.length;\n      }\n\n      this.setState({\n        customEmailList: mails,\n        pointsToUse: pointsToUse\n      });\n    }, 800);\n  }\n\n  setDecisorOn() {\n    if (this.state.pointsToUse > 0) {\n      if (this.state.from == null || this.state.subject == null || this.state.msgToSend == null) {\n        alert(\"Error: Some form(s) are left empty\");\n      } else {\n        this.setState({\n          decisor: true\n        });\n      }\n    } else {\n      alert(\"Error: You cannot use 0 points\");\n    }\n  }\n\n  setDecisorOff() {\n    this.setState({\n      decisor: false\n    });\n  }\n\n  setProductsOn() {\n    this.setState({\n      products: true\n    });\n  }\n\n  setProductsOff() {\n    this.setState({\n      products: false\n    });\n  }\n\n  render() {\n    function decisorDom(self) {\n      if (self.state.pointsToUse <= self.state.points) {\n        return __jsx(\"div\", {\n          className: \"container decisor-items-container\",\n          onClick: self.setDecisorOff\n        }, __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"div\", {\n          className: \"col-md-12\"\n        }, __jsx(\"h2\", null, \"You will use \", __jsx(\"b\", null, self.state.pointsToUse), \" points.\", __jsx(\"br\", null), __jsx(\"br\", null), \"Points left: \", __jsx(\"b\", null, self.state.points - self.state.pointsToUse), __jsx(\"br\", null), __jsx(\"br\", null), \"Are you sure?\")), __jsx(\"div\", {\n          className: self.state.decisorLoading ? \"col-md-12 decisor-loading\" : \"col-md-12 decisor-loading hide\"\n        }, __jsx(\"div\", {\n          className: \"loadingio-spinner-eclipse-h5c55szghjc\",\n          style: {\n            transform: \"scale(0.7)\"\n          }\n        }, __jsx(\"div\", {\n          className: \"ldio-3kphjdhe4ws\"\n        }, __jsx(\"div\", null)))), __jsx(\"div\", {\n          className: self.state.decisorLoading ? \"col-md-12 row hide\" : \"col-md-12 row\"\n        }, __jsx(\"div\", {\n          className: \"col-md-6\"\n        }, __jsx(\"button\", {\n          className: \"decisor-button\",\n          onClick: self.sendRequest\n        }, \"Yes\")), __jsx(\"div\", {\n          className: \"col-md-6\"\n        }, __jsx(\"button\", {\n          className: \"decisor-button black\",\n          onClick: self.setDecisorOff\n        }, \"No\")))));\n      } else {\n        return __jsx(\"div\", {\n          className: \"container decisor-items-container\"\n        }, __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"div\", {\n          className: \"col-md-12\"\n        }, __jsx(\"h2\", null, \"You don't have enough points.\", __jsx(\"br\", null), __jsx(\"br\", null), \"You need \", self.state.pointsToUse - self.state.points == 1 ? self.state.pointsToUse - self.points + \" point\" : self.state.pointsToUse - self.points + \" points\", \".\")), __jsx(\"div\", {\n          className: \"col-md-12 row\"\n        }, __jsx(\"div\", {\n          className: \"col-md-6\"\n        }, __jsx(\"button\", {\n          className: \"decisor-button\"\n        }, \"Add Points\")), __jsx(\"div\", {\n          className: \"col-md-6\"\n        }, __jsx(\"button\", {\n          className: \"decisor-button black\",\n          onClick: self.setDecisorOff\n        }, \"Close\")))));\n      }\n    }\n\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Dashboard\"), __jsx(\"link\", {\n      href: \"/css/bootstrap.css\",\n      rel: \"stylesheet\"\n    }), __jsx(\"link\", {\n      href: \"/css/dashboard.css\",\n      rel: \"stylesheet\"\n    })), __jsx(\"div\", {\n      className: this.state.pageLoading ? \"loading\" : \"loading hide\"\n    }, __jsx(\"div\", {\n      className: \"loadingio-spinner-eclipse-h5c55szghjc\"\n    }, __jsx(\"div\", {\n      className: \"ldio-3kphjdhe4ws\"\n    }, __jsx(\"div\", null)))), __jsx(\"div\", {\n      className: this.state.products ? \"decisor active\" : \"decisor\"\n    }, __jsx(\"div\", {\n      className: \"container\",\n      onClick: this.setProductsOff\n    }, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"product-details\"\n    }, __jsx(\"h2\", null, \"Starter Pack\"), __jsx(\"h2\", null, \"100 Points\"), __jsx(\"h2\", null, \"1.00$\"), __jsx(\"button\", null, \"Pay with PayPal\"))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"product-details\"\n    }, __jsx(\"h2\", null, \"Medium Pack\"), __jsx(\"h2\", null, \"400 Points\"), __jsx(\"h2\", null, \"2.50$\"), __jsx(\"button\", {\n      className: \"black\"\n    }, \"Pay with PayPal\"))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"product-details\"\n    }, __jsx(\"h2\", null, \"Marketer Pack\"), __jsx(\"h2\", null, \"700 Points\"), __jsx(\"h2\", null, \"5$\"), __jsx(\"button\", null, \"Pay with PayPal\")))))), __jsx(\"div\", {\n      className: this.state.decisor ? \"decisor active\" : \"decisor\"\n    }, decisorDom(this)), __jsx(\"div\", {\n      className: \"container-fluid\"\n    }, __jsx(\"div\", {\n      className: \"row center\"\n    }, __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"statistics-block\"\n    }, __jsx(\"h2\", null, \"E-Mails Sent\"), __jsx(\"h3\", null, this.state.sent))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"statistics-block\"\n    }, __jsx(\"h2\", null, \"Available Points\"), __jsx(\"h3\", null, this.state.points))), __jsx(\"div\", {\n      className: \"col-md-4\"\n    }, __jsx(\"div\", {\n      className: \"statistics-block\"\n    }, __jsx(\"h2\", null, \"Total E-Mails Sent\"), __jsx(\"h3\", null, this.state.totalEmailsSent)))), __jsx(\"div\", {\n      className: \"row\",\n      style: {\n        margin: \"5rem 0\"\n      }\n    }, __jsx(\"div\", {\n      className: \"col-md-4 input-block center\"\n    }, __jsx(\"h3\", null, \"Custom E-Mail List\"), __jsx(\"textarea\", {\n      className: \"custom-list\",\n      type: \"text\",\n      placeholder: \"Leave blank if you don't want to add custom E-Mails\",\n      onChange: this.setCustomEmailList\n    }), __jsx(\"button\", {\n      style: {\n        padding: \"1rem 36.5%\"\n      },\n      onClick: this.setProductsOn\n    }, \"Add Points\")), __jsx(\"div\", {\n      className: \"col-md-8 input-block center\"\n    }, __jsx(\"h3\", null, \"Template\"), __jsx(\"div\", {\n      className: \"col-md-2 inputter\"\n    }, __jsx(\"input\", {\n      type: \"number\",\n      className: \"center\",\n      placeholder: \"Amount\",\n      on: true,\n      onChange: this.setPointsToUse\n    })), __jsx(\"div\", {\n      className: \"col-md-5 inputter\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"center\",\n      placeholder: \"From\",\n      onChange: this.setFrom\n    })), __jsx(\"div\", {\n      className: \"col-md-5 inputter\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"center\",\n      placeholder: \"Subject\",\n      onChange: this.setSubject\n    })), __jsx(\"div\", {\n      className: \"col-md-12\"\n    }, __jsx(\"textarea\", {\n      type: \"text\",\n      placeholder: \"Enter your Custom HTML or your Message\",\n      onChange: this.setMsgToSend\n    }), __jsx(\"button\", {\n      onClick: this.setDecisorOn\n    }, \"Send!\"))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}