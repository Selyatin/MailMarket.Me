{"ast":null,"code":"import { Base64 } from \"js-base64\";\nimport mongodb from \"mongodb\";\nimport simplesmtp from \"node-smtp-client\";\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://main-user:09730Success@mailmarketme-k4esh.mongodb.net/test?retryWrites=true&w=majority\";\nconst client = new MongoClient(uri, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\nconst mailerClient = simplesmtp.Mail({\n  host: \"mbox.contact.bg\",\n  port: 25,\n  secure: false,\n  username: \"mailmarketme@mbox.contact.bg\",\n  password: \"09730Success\"\n});\n\nfunction findEmailAddresses(StrObj) {\n  var separateEmailsBy = \", \";\n  var email = \"<none>\"; // if no match, use this\n\n  var emailsArray = StrObj.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z0-9._-]+)/gi);\n\n  if (emailsArray) {\n    email = \"\";\n\n    for (var i = 0; i < emailsArray.length; i++) {\n      if (i != 0) email += separateEmailsBy;\n      email += emailsArray[i];\n    }\n  }\n\n  return email;\n}\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nexport default ((req, res) => {\n  if (req.method === \"POST\" && req.body.id != undefined && req.body.id != null && req.body.pointsToUse != undefined && req.body.pointsToUse != null && req.body.customEmailList != undefined && req.body.customEmailList != null && req.body.msgToSend != undefined && req.body.msgToSend != null && req.body.from != undefined && req.body.from != null) {\n    client.connect(err => {\n      if (err) throw err;\n      const db = client.db(\"MailMarketMe\");\n      db.collection(\"accounts\").findOne({\n        _id: mongodb.ObjectId(Base64.decode(req.body.id))\n      }, (err, result) => {\n        if (req.body.pointsToUse <= result.points) {\n          db.collection(\"accounts\").updateOne({\n            _id: mongodb.ObjectId(Base64.decode(req.body.id))\n          }, {\n            $set: {\n              points: result.points - req.body.pointsToUse,\n              totalEmailsSent: parseInt(req.body.pointsToUse) + parseInt(result.totalEmailsSent)\n            }\n          }, err => {\n            if (err) throw err;\n          });\n          let mailsToSend = db.collection(\"emails\").find({});\n          let customEmailList = req.body.customEmailList.length > 0 ? req.body.customEmailList.replace(\" \", \"\").replace(\",\", \"\\n\").split(\"\\n\") : [];\n          mailsToSend.toArray().then(res => {\n            res = shuffle(res);\n            let mailArray = [];\n\n            for (let i = 0; i <= req.body.pointsToUse; i++) {\n              mailArray.push(res[i].email);\n            }\n\n            mailArray = mailArray.concat(customEmailList, mailArray);\n            mailArray.forEach(data => {\n              mailerClient.message({\n                from: req.body.from,\n                to: data,\n                subject: req.body.subject,\n                \"Content-type\": \"text/html\"\n              }).body(req.body.msgToSend).send(err => {\n                if (err) console.log(err);\n              });\n            });\n          }); // Send the emails \n\n          res.status(200).end();\n        } else {\n          res.status(406).end();\n        }\n      });\n    });\n  } else {\n    res.status(406).end();\n  }\n});","map":{"version":3,"sources":["/Users/mac/Desktop/Web Apps/MailMarket.me/mailmarket.me/pages/api/mailer.js"],"names":["Base64","mongodb","simplesmtp","MongoClient","uri","client","useNewUrlParser","useUnifiedTopology","mailerClient","Mail","host","port","secure","username","password","findEmailAddresses","StrObj","separateEmailsBy","email","emailsArray","match","i","length","shuffle","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","req","res","method","body","id","undefined","pointsToUse","customEmailList","msgToSend","from","connect","err","db","collection","findOne","_id","ObjectId","decode","result","points","updateOne","$set","totalEmailsSent","parseInt","mailsToSend","find","replace","split","toArray","then","mailArray","push","concat","forEach","data","message","to","subject","send","console","log","status","end"],"mappings":"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","sourcesContent":["import { Base64 } from \"js-base64\";\nimport mongodb from \"mongodb\";\nimport simplesmtp from \"node-smtp-client\";\nconst MongoClient = mongodb.MongoClient;\nconst uri = \"mongodb+srv://main-user:09730Success@mailmarketme-k4esh.mongodb.net/test?retryWrites=true&w=majority\";\n\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst mailerClient = simplesmtp.Mail({\n    host: \"mbox.contact.bg\",\n    port: 25,\n    secure: false,\n    username: \"mailmarketme@mbox.contact.bg\",\n    password: \"09730Success\",\n})\n\nfunction findEmailAddresses(StrObj) {\n    var separateEmailsBy = \", \";\n    var email = \"<none>\"; // if no match, use this\n    var emailsArray = StrObj.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\\\.[a-zA-Z0-9._-]+)/gi);\n    if (emailsArray) {\n        email = \"\";\n        for (var i = 0; i < emailsArray.length; i++) {\n            if (i != 0) email += separateEmailsBy;\n            email += emailsArray[i];\n        }\n    }\n    return email;\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\nexport default (req, res) => {\n    if (req.method === \"POST\" && req.body.id != undefined && req.body.id != null && req.body.pointsToUse != undefined && req.body.pointsToUse != null && req.body.customEmailList != undefined && req.body.customEmailList != null && req.body.msgToSend != undefined && req.body.msgToSend != null && req.body.from != undefined && req.body.from != null) {\n        client.connect(err => {\n            if (err) throw err;\n            const db = client.db(\"MailMarketMe\");\n            db.collection(\"accounts\").findOne({ _id: mongodb.ObjectId(Base64.decode(req.body.id)) }, (err, result) => {\n                if (req.body.pointsToUse <= result.points) {\n                    db.collection(\"accounts\").updateOne({ _id: mongodb.ObjectId(Base64.decode(req.body.id)) },\n                        {\n                            $set: {\n                                points: result.points - req.body.pointsToUse,\n                                totalEmailsSent: parseInt(req.body.pointsToUse) + parseInt(result.totalEmailsSent)\n                            }\n                        },\n                        err => { if (err) throw err }\n                    );\n\n                    let mailsToSend = db.collection(\"emails\").find({});\n                    let customEmailList = req.body.customEmailList.length > 0 ? req.body.customEmailList.replace(\" \", \"\").replace(\",\", \"\\n\").split(\"\\n\") : [];\n                    mailsToSend.toArray().then(res => {\n                        res = shuffle(res);\n                        let mailArray = [];\n                        for(let i = 0; i <= req.body.pointsToUse; i++){\n                            mailArray.push(res[i].email);\n                        }\n                        mailArray = mailArray.concat(customEmailList, mailArray);\n\n                        mailArray.forEach(data => {\n                            mailerClient.message({\n                                from: req.body.from,\n                                to: data,\n                                subject: req.body.subject,\n                                \"Content-type\": \"text/html\",\n                            }).body(req.body.msgToSend).send(err => {if(err) console.log(err)});\n                        })\n                    });\n                        \n                        // Send the emails \n                        res.status(200).end();\n                    }else {\n                        res.status(406).end();\n                    }\n        });\n        });\n    }\n    else {\n        res.status(406).end();\n    }\n}"]},"metadata":{},"sourceType":"module"}